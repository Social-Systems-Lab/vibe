name: Docker Publish vibe-cloud

on:
    push:
        branches:
            - main # Or your primary branch
        paths:
            - "vibe-cloud/vibe-cloud-api/**" # Trigger on API changes
            - "vibe-cloud/vibe-cloud-control-plane/**" # Trigger on Control Plane changes

jobs:
    build-and-push-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read # To checkout the repository
        strategy:
            matrix:
                service: [api, control-plane] # Define the services to build
                include: # Map service names to context paths
                    - service: api
                      context: ./vibe-cloud/vibe-cloud-api
                    - service: control-plane
                      context: ./vibe-cloud/vibe-cloud-control-plane

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker - ${{ matrix.service }}
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: sslorg/vibe-cloud-${{ matrix.service }} # Use matrix service name in image name
                  tags: |
                      type=sha,prefix=,suffix=,format=short
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image - ${{ matrix.service }}
              uses: docker/build-push-action@v5
              with:
                  context: ${{ matrix.context }} # Use matrix context path
                  file: ${{ matrix.context }}/Dockerfile # Point to Dockerfile within the context
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      APP_VERSION=${{ steps.meta.outputs.version }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
