/**
 * Represents the core identity information stored in Vibe Cloud.
 */
export interface UserIdentity {
    userId: string; // Unique identifier for the user
    publicKey: string; // User's public RSA key in PEM format or similar standard
    // Add other identity fields as needed, e.g., registration timestamp
}

/**
 * Represents a permission grant stored by the Vibe Agent.
 */
export type PermissionStatus = "always" | "never" | "prompt"; // MVP focuses on 'always'/'never'

export interface PermissionGrant {
    [scope: string]: PermissionStatus; // e.g., "read:notes": "always"
}

export interface OriginPermissions {
    [origin: string]: PermissionGrant; // e.g., "https://test-app.com": { "read:notes": "always" }
}

/**
 * Represents a document stored in a Vibe collection.
 * Includes standard CouchDB fields and Vibe-specific metadata.
 */
export interface VibeDocument<T = Record<string, any>> {
    _id: string; // Format: {collection}/{uuid}
    _rev?: string; // CouchDB revision
    userId: string; // User who owns the document
    $collection: string; // Vibe collection name
    createdAt: string; // ISO timestamp
    updatedAt: string; // ISO timestamp
    // User-defined data fields
    [key: string]: any;
}

/**
 * WebSocket Message Types (Agent <-> Cloud)
 */
export interface WsSubscribePayload {
    subscriptionId: string; // Unique ID generated by Agent
    collection: string;
    filter?: Record<string, any>; // CouchDB selector filter
}

export interface WsUnsubscribePayload {
    subscriptionId: string;
}

export interface WsDataPayload<T = any> {
    subscriptionId: string;
    docs: VibeDocument<T>[]; // Array of documents matching the subscription
}

export interface WsErrorPayload {
    subscriptionId?: string; // Optional, if error relates to a specific subscription
    message: string;
}

export type WsAgentToServerMessage = { action: "subscribe"; payload: WsSubscribePayload } | { action: "unsubscribe"; payload: WsUnsubscribePayload };

export type WsServerToAgentMessage =
    | { type: "data"; payload: WsDataPayload }
    | { type: "error"; payload: WsErrorPayload }
    | { type: "subscribed"; payload: { subscriptionId: string } } // Confirmation
    | { type: "unsubscribed"; payload: { subscriptionId: string } }; // Confirmation

/**
 * SDK <-> Agent Message Types
 */
export interface SdkRequestPermissionsPayload {
    permissions: string[]; // e.g., ["read:notes", "write:notes"]
}

export interface SdkWritePayload<T = any> {
    collection: string;
    data: T | T[]; // Single document or array
}

export interface SdkReadOncePayload {
    collection: string;
    filter?: Record<string, any>;
}

export interface SdkSubscribePayload {
    sdkCallbackId: string; // Unique ID generated by SDK instance
    collection: string;
    filter?: Record<string, any>;
}

export interface SdkUnsubscribePayload {
    subscriptionId: string; // ID received from Agent on successful subscribe
}

// Add more shared types as the implementation progresses...
