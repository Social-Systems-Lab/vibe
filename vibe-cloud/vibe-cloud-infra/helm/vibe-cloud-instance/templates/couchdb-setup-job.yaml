{{- if .Values.couchdb.setupJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-cdb-setup # Shorter job name
  namespace: {{ include "vibe-cloud-instance.namespace" . }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name | quote }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: cdb-setup # Shorter component label
    helm.sh/chart: {{ include "vibe-cloud-instance.chart" . }}
  annotations:
    # Helm hook to run after install and upgrade
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5" # Run after CouchDB statefulset is likely up
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed # Delete job pod after completion/failure
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name | quote }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: cdb-setup # Shorter component label for pod template
    spec:
      restartPolicy: Never
      containers:
        - name: couchdb-setup
          image: curlimages/curl:latest # Using a small curl image
          env:
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "vibe-cloud-instance.couchdbSecretName" . }}
                  key: username
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "vibe-cloud-instance.couchdbSecretName" . }}
                  key: password
            - name: COUCHDB_SERVICE_HOST
              # Assuming the CouchDB service name is based on the fullname helper for couchdb
              value: {{ include "vibe-cloud-instance.couchdb.fullname" . }}
            - name: COUCHDB_SERVICE_PORT
              value: {{ .Values.couchdb.service.port | quote }}
          command:
            - /bin/sh
            - -c
            - |
              set -ex
              echo "Waiting for CouchDB service to be ready (max 60s)..."
              COUNTER=0
              until curl -s -f "http://${COUCHDB_SERVICE_HOST}:${COUCHDB_SERVICE_PORT}/" > /dev/null; do
                sleep 5
                COUNTER=$((COUNTER+1))
                if [ $COUNTER -ge 12 ]; then
                  echo "Timeout waiting for CouchDB service."
                  exit 1
                fi
              done
              echo "CouchDB service is up."

              COUCHDB_ENDPOINT="http://${COUCHDB_USER}:${COUCHDB_PASSWORD}@${COUCHDB_SERVICE_HOST}:${COUCHDB_SERVICE_PORT}"
              
              echo "Ensuring CouchDB system databases exist..."
              # Idempotent PUT requests to create databases if they don't exist
              # Use -o /dev/null to discard output, -w "%{http_code}" to get status
              STATUS_USERS=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "${COUCHDB_ENDPOINT}/_users")
              echo "PUT _users status: ${STATUS_USERS}"
              if [ "$STATUS_USERS" != "201" ] && [ "$STATUS_USERS" != "412" ]; then echo "Warning: _users creation/check failed with status ${STATUS_USERS}"; fi
              
              STATUS_REPLICATOR=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "${COUCHDB_ENDPOINT}/_replicator")
              echo "PUT _replicator status: ${STATUS_REPLICATOR}"
              if [ "$STATUS_REPLICATOR" != "201" ] && [ "$STATUS_REPLICATOR" != "412" ]; then echo "Warning: _replicator creation/check failed with status ${STATUS_REPLICATOR}"; fi

              STATUS_GLOBAL_CHANGES=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "${COUCHDB_ENDPOINT}/_global_changes")
              echo "PUT _global_changes status: ${STATUS_GLOBAL_CHANGES}"
              if [ "$STATUS_GLOBAL_CHANGES" != "201" ] && [ "$STATUS_GLOBAL_CHANGES" != "412" ]; then echo "Warning: _global_changes creation/check failed with status ${STATUS_GLOBAL_CHANGES}"; fi
              
              # Attempt to finalize cluster setup
              echo "Attempting to finalize CouchDB cluster setup (single node)..."
              # For single node, CouchDB expects an admin to be set, then this call.
              # The payload for finish_cluster is just {"action": "finish_cluster"}
              # This is usually called after setting an admin password.
              # If COUCHDB_USER/PASSWORD env vars correctly set up admin, this should work.
              FINISH_SETUP_PAYLOAD='{"action": "finish_cluster"}'
              STATUS_FINISH=$(curl -s -o /dev/null -w "%{http_code}" -X POST "${COUCHDB_ENDPOINT}/_cluster_setup" \
                -H "Content-Type: application/json" \
                -d "${FINISH_SETUP_PAYLOAD}")
              echo "POST /_cluster_setup status: ${STATUS_FINISH}"
              if [ "$STATUS_FINISH" != "201" ] && [ "$STATUS_FINISH" != "200" ]; then
                # It might return 400 if already configured, which is fine.
                # "Cannot set up node because it is already configured."
                # Or 500 if "Cluster setup is not supported on this node." if it's a very old version or misconfigured.
                echo "Warning: Finalizing cluster setup returned status ${STATUS_FINISH} (this might be okay if already configured or not applicable)."
              fi
              
              echo "CouchDB setup script completed."
{{- end }}
