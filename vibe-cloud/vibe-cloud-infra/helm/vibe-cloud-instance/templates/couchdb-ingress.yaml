{{- if .Values.ingress.enabled -}}
apiVersion: {{ include "vibe-cloud-instance.ingress.apiVersion" . }}
kind: Ingress
metadata:
  name: {{ include "vibe-cloud-instance.couchdb.fullname" . }} # Unique name for CouchDB ingress
  namespace: {{ include "vibe-cloud-instance.namespace" . }}
  labels:
    {{- include "vibe-cloud-instance.labels" . | nindent 4 }}
    app.kubernetes.io/component: couchdb-ingress
  annotations:
    # Inherit common annotations, especially for cert-manager
    {{- with .Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    # Annotation to apply the StripPrefix middleware
    # The middleware must be in the same namespace as the IngressRoute or Ingress
    # For Ingress (not IngressRoute), the format is traefik.ingress.kubernetes.io/router.middlewares: <namespace>-<middleware-name>@kubernetescrd
    "traefik.ingress.kubernetes.io/router.middlewares": "{{ .Release.Namespace }}-{{ .Release.Name }}-strip-couchdb@kubernetescrd"
spec:
  {{- if and (.Values.ingress.className) (eq (include "vibe-cloud-instance.ingress.apiVersion" .) "networking.k8s.io/v1") }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  rules:
    - host: {{ .Values.instanceIdentifier }}.{{ .Values.ingress.mainDomain }}
      http:
        paths:
          - path: /couchdb
            pathType: Prefix # PathType Prefix is important for Traefik to match /couchdb/*
            backend:
              {{- if eq (include "vibe-cloud-instance.ingress.apiVersion" .) "networking.k8s.io/v1" }}
              service:
                name: {{ include "vibe-cloud-instance.couchdb.fullname" . }}
                port:
                  number: {{ .Values.couchdb.service.port }}
              {{- else }}
              # For older ingress apiVersions
              serviceName: {{ include "vibe-cloud-instance.couchdb.fullname" . }}
              servicePort: {{ .Values.couchdb.service.port }}
              {{- end }}
  {{- if .Values.ingress.tls }}
  # Use the same TLS settings as the main app ingress, assuming cert-manager handles it
  # or the secret is already provided for the main host.
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        - {{ .Values.instanceIdentifier }}.{{ .Values.ingress.mainDomain }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- else if (hasKey .Values.ingress.annotations "cert-manager.io/cluster-issuer") }}
  tls:
    - hosts:
        - {{ .Values.instanceIdentifier }}.{{ .Values.ingress.mainDomain }}
      # cert-manager will use the existing secret for this host, or create one if it doesn't exist
      # based on the main ingress's TLS config (e.g., {{ .Values.instanceIdentifier }}-tls)
      secretName: {{ .Values.instanceIdentifier }}-tls # Ensure this matches the main ingress TLS secret name
  {{- end }}
{{- end }}
